<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat with <%= receiver %></title>
  <link rel="stylesheet" href="/css/style.css?v=1.0">
  <style>
    /* Premium Buttons */
    .message-options {
      margin-top: 5px;
      display: flex;
      gap: 6px;
    }
    .message-options button {
      border: none;
      padding: 4px 8px;
      font-size: 12px;
      border-radius: 6px;
      cursor: pointer;
      color: white;
    }
    .reply-btn { background-color: #007bff; }
    .edit-btn { background-color: #28a745; }
    .delete-btn { background-color: #dc3545; }
    
    /* Reply Preview */
    .reply-preview {
      background: #f1f0f0;
      padding: 4px 8px;
      border-left: 4px solid #34b7f1;
      font-size: 13px;
      margin-bottom: 5px;
      border-radius: 5px;
    }
    
    /* Edit Preview */
    #editPreview {
      background: #fff3cd;
      color: #856404;
      padding: 5px 10px;
      border-left: 4px solid #ffc107;
      margin: 5px;
      font-size: 13px;
      display: none;
    }
  </style>
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#34b7f1">
  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/service-worker.js')
      .then(reg => console.log('‚úÖ Service Worker registered'))
      .catch(err => console.log('‚ùå Service Worker failed', err));
    }
  </script>
  
</head>
<body>

<!-- Top Bar -->
<div class="top-bar chat-top-bar">
  <a href="/chat" class="back-btn">&larr;</a>
  <img src="<%= receiverDp || '/images/dummy.jpg' %>" class="chat-dp" alt="DP">
  <div style="display:flex;flex-direction:column;">
    <span class="chat-username"><%= receiver %></span>
    <span id="statusText" style="font-size:12px;color:white;">Last seen recently</span>
  </div>
</div>

<!-- Chat Messages -->
<div class="chat-messages" id="messages"></div>

<!-- Typing Indicator -->
<div id="typingIndicator" style="text-align:center;color:gray;margin:5px 0;"></div>

<!-- Edit Mode Preview -->
<div id="editPreview">Editing message...</div>

<!-- Reply Mode Preview -->
<div id="replyPreview" style="display:none;" class="reply-preview"></div>

<!-- Message Input Area -->
<div class="message-input">
  <button class="emoji-btn">üòä</button>
  <input type="text" id="messageInput" placeholder="Type a message...">
  <div class="input-icons">
    <input type="file" id="imageInput" accept="image/*" style="display:none;">
    <label for="imageInput" style="cursor:pointer;">üì∑</label>
    <button id="sendButton" class="send-btn" disabled>‚û§</button>
  </div>
</div>

<div id="imagePreviewText" style="text-align:center;color:green;margin:5px 0;font-size:13px;"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
const sender = "<%= sender %>";
const receiver = "<%= receiver %>";

const messagesDiv = document.getElementById('messages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const imageInput = document.getElementById('imageInput');
const imagePreviewText = document.getElementById('imagePreviewText');
const statusText = document.getElementById('statusText');
const replyPreview = document.getElementById('replyPreview');
const editPreview = document.getElementById('editPreview');

let selectedImageData = null;
let replyToContent = null;
let editingMessageId = null;

// --- Register and Join ---
socket.emit('register', { username: sender });
socket.emit('joinChat', { sender, receiver });
socket.emit('seen', { sender, receiver });

// --- Load Old Messages ---
socket.on('loadOldMessages', (messages) => {
  messages.forEach(msg => {
    const type = msg.sender === sender ? 'sent' : 'received';
    addMessageBubble(msg._id, msg.content, type, msg.type, msg.time, msg.seen, msg.replyTo);
  });
});

// --- Typing Detect ---
messageInput.addEventListener('input', () => {
  if (messageInput.value.trim() !== '' || selectedImageData) {
    sendButton.disabled = false;
    socket.emit('typing', sender);
  } else {
    sendButton.disabled = true;
  }
});

// --- Image Select ---
imageInput.addEventListener('change', function() {
  const file = this.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      selectedImageData = e.target.result;
      imagePreviewText.innerText = "üì∑ Image selected ‚úÖ";
      sendButton.disabled = false;
    };
    reader.readAsDataURL(file);
  }
});

// --- Send or Edit Message ---
sendButton.addEventListener('click', () => {
  if (editingMessageId) {
    const newText = messageInput.value.trim();
    if (newText) {
      socket.emit('editMessage', { messageId: editingMessageId, newContent: newText });
    }
    editingMessageId = null;
    editPreview.style.display = 'none';
    messageInput.value = '';
  } else if (selectedImageData) {
    socket.emit('sendImage', { sender, receiver, imageData: selectedImageData, replyTo: replyToContent });
    addMessageBubble(null, selectedImageData, 'sent', 'image', getCurrentTime(), false, replyToContent);
    selectedImageData = null;
    imagePreviewText.innerText = '';
  } else {
    const message = messageInput.value.trim();
    if (message) {
      socket.emit('chatMessage', { sender, receiver, message, replyTo: replyToContent });
      addMessageBubble(null, message, 'sent', 'text', getCurrentTime(), false, replyToContent);
      messageInput.value = '';
    }
  }
  clearReply();
  sendButton.disabled = true;
});

// --- Bubble ID Assign on Send ---
socket.on('messageSent', ({ _id }) => {
  const bubbles = document.querySelectorAll('.message.sent');
  const lastBubble = bubbles[bubbles.length - 1];
  if (lastBubble) lastBubble.setAttribute('data-id', _id);
});

// --- Real-time New Message ---
socket.on('newMessage', (data) => {
  if (data.sender === receiver && data.receiver === sender) {
    addMessageBubble(data._id, data.message, 'received', data.type, data.time, true, data.replyTo);
    socket.emit('seen', { sender, receiver });
  }
});

// --- Real-time Seen Update (Double Tick) ---
socket.on('seenUpdate', ({ sender: seenSender, receiver: seenReceiver }) => {
  if (sender === seenReceiver && receiver === seenSender) {
    const allSent = document.querySelectorAll('.message.sent .time');
    if (allSent.length > 0) {
      const lastTime = allSent[allSent.length - 1];
      if (lastTime.innerHTML.includes('‚úî') && !lastTime.innerHTML.includes('‚úî‚úî')) {
        lastTime.innerHTML = lastTime.innerHTML.replace('‚úî', '‚úî‚úî');
      }
    }
  }
});

// --- Real-time Edit Message ---
socket.on('messageEdited', ({ messageId, newContent }) => {
  const bubble = document.querySelector(`.message[data-id="${messageId}"]`);
  if (bubble) {
    bubble.querySelector('div').innerText = newContent + " (edited)";
  }
});

// --- Real-time Delete Message ---
socket.on('messageDeleted', ({ messageId }) => {
  const bubble = document.querySelector(`.message[data-id="${messageId}"]`);
  if (bubble) bubble.remove();
});

// --- Add Message Bubble Function ---
function addMessageBubble(id, content, typeBubble, messageType = 'text', time = getCurrentTime(), seen = false, replyTo = null) {
  const bubble = document.createElement('div');
  bubble.classList.add('message', typeBubble);
  if (id) bubble.setAttribute('data-id', id);

  let ticks = typeBubble === 'sent' ? (seen ? '‚úî‚úî' : '‚úî') : '';
  let replyHtml = replyTo ? `<div class="reply-preview">${replyTo}</div>` : '';

  let optionsHtml = `<div class="message-options"><button class="reply-btn" onclick="startReply('${content}')">Reply</button>`;
  if (typeBubble === 'sent') {
    optionsHtml += `<button class="edit-btn" onclick="startEdit(this)">Edit</button><button class="delete-btn" onclick="deleteMessage(this)">Delete</button>`;
  }
  optionsHtml += `</div>`;

  if (messageType === 'text') {
    bubble.innerHTML = `${replyHtml}<div>${content}</div><div class="time">${time} ${ticks}</div>${optionsHtml}`;
  } else {
    bubble.innerHTML = `${replyHtml}<img src="${content}" style="max-width:160px; border-radius:10px;"><div class="time">${time} ${ticks}</div>${optionsHtml}`;
  }

  messagesDiv.appendChild(bubble);
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// --- Start Reply ---
function startReply(content) {
  replyToContent = content;
  replyPreview.style.display = 'block';
  replyPreview.innerText = `Replying to: "${content}"`;
}

// --- Start Edit ---
function startEdit(btn) {
  const bubble = btn.closest('.message');
  const text = bubble.querySelector('div').innerText.replace(' (edited)', '');
  editingMessageId = bubble.getAttribute('data-id');
  messageInput.value = text;
  editPreview.style.display = 'block';
}

// --- Delete Message ---
function deleteMessage(btn) {
  const bubble = btn.closest('.message');
  const messageId = bubble.getAttribute('data-id');
  if (messageId) {
    socket.emit('deleteMessage', { messageId });
  }
  bubble.remove();
}

// --- Helpers ---
function clearReply() {
  replyToContent = null;
  replyPreview.style.display = 'none';
}

function getCurrentTime() {
  const now = new Date();
  return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// --- Online / Typing System ---
socket.on('userOnline', (username) => {
  if (username === receiver) statusText.innerText = 'Online';
});

socket.on('userOffline', ({ username, lastSeen }) => {
  if (username === receiver) statusText.innerText = `Last seen at ${lastSeen}`;
});

socket.on('typing', (username) => {
  if (username === receiver) {
    statusText.innerText = 'Typing...';
    setTimeout(() => socket.emit('checkOnline', receiver), 2000);
  }
});

socket.emit('checkOnlineStatus', receiver);

socket.on('userIsOnline', (username) => {
  if (username === receiver) statusText.innerText = 'Online';
});

socket.on('userIsOffline', (username) => {
  if (username === receiver) statusText.innerText = 'Last seen recently';
});

setInterval(() => socket.emit('checkOnline', receiver), 5000);
</script>

</body>
</html>
